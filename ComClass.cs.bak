using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using System.Windows.Forms;
using System.Drawing;
using System.IO;
using System.Text.RegularExpressions;
using Microsoft.Office.Interop.Word;
using System.Drawing.Drawing2D;
using System.Data.SqlClient;

namespace HL_人事
{
    class ComClass
    {
        /// <summary>
        /// 文字列が全角カタカナかどうかを判定します
        /// </summary>
        /// <param name="target">対象の文字列</param>
        /// <returns>文字列が全角カタカナの場合はtrue、それ以外はfalse</returns>
        public static bool IsFullKatakana(string target)
        {
            return new Regex("^\\p{IsKatakana}+$").IsMatch(target);
        }

        public static int IsKinngaku(String str)
        {
            int i = 0;
            if (str != null && !str.Equals(""))
            {
                if (str.Substring(0, 1).Equals("\\"))
                {
                    str = str.Remove(0, 1);
                    str = str.TrimStart('0');

                    if (str.Equals(""))
                    {
                        return 0;
                    }
                }



                if (str.Substring(0, 1).Equals("-"))
                {
                    str = str.Remove(0, 1);
                }

                char[] sss = str.ToCharArray();

                Array.Reverse(sss);

                if (str.IndexOf(',') >= 0)
                {

                    for (int j = 0; j < str.Count(); j++)
                    {
                        if (((j + 1) % 4) == 0)
                        {
                            if (sss[j] != ',')
                            {
                                i = -1;
                                return i;
                            }
                        }
                        else
                        {
                            if (sss[j] < '0' || sss[j] > '9')
                            {
                                i = -1;
                                return i;
                            }
                        }
                    }
                }
                else
                {
                    for (int j = 0; j < str.Count(); j++)
                    {
                        if (sss[j] < '0' || sss[j] > '9')
                        {
                            i = -1;
                            return i;
                        }
                    }
                }
            }
            else
            {
                i = -1;
            }
            return i;
        }

        public static String numToKinngake(String str)
        {
            String sRet = "";
            bool maiFlag = false;

            if (str != null && !str.Equals(""))
            {
                String sTmp = "";

                if (str.Substring(0, 1).Equals("\\"))
                {
                    sTmp = str.Remove(0, 1).Replace(",", "");
                }
                else
                {
                    sTmp = str.Replace(",", "");
                }

                int iOut = 0;
                if (!int.TryParse(sTmp, out iOut))
                {
                    return "";
                }

                if (sTmp.Equals(""))
                {
                    return "";
                }

                if (sTmp.Substring(0, 1).Equals("-"))
                {
                    sTmp = sTmp.Remove(0, 1);

                    if (sTmp.Equals(""))
                    {
                        return "";
                    }
                    maiFlag = true;
                }

                char[] sss = sTmp.ToCharArray();

                Array.Reverse(sss);

                if (sTmp.IndexOf(',') < 0)
                {
                    for (int j = 0; j < sTmp.Count(); j++)
                    {
                        if ((j % 3) == 0 && j != 0)
                        {
                            sRet = sRet + ',';
                        }

                        sRet = sRet + sss[j];
                    }

                    if (maiFlag)
                    {
                        sRet = sRet + '-';
                    }

                    sRet = sRet + '\\';

                    char[] aaa = sRet.ToCharArray();
                    Array.Reverse(aaa);

                    sRet = new string(aaa);
                }
                else
                {
                    return str;
                }
            }

            return sRet;
        }

        public static Int64 KinngageToNum(String str)
        {
            Int64 iRet = 0;
            String sRet = "";

            if (str == null || str.Equals(""))
            {
                return iRet;
            }

            if (str.Substring(0, 1).Equals("\\"))
            {
                str = str.Remove(0, 1);
            }

            char[] sss = str.ToCharArray();

            for (int j = 0; j < str.Count(); j++)
            {
                if (sss[j] != ',' && sss[j] != '，')
                {
                    sRet = sRet + sss[j];
                }
            }

            if (sRet.Equals(""))
            {
                return iRet;
            }

            try
            {
                iRet = Int64.Parse(sRet);
            }
            catch
            {
                return iRet;
            }

            return iRet;
        }

        public static String KinngakuAdd(String str1, String str2, String str3)
        {
            return KinngakuAdd(KinngakuAdd(str1, str2), str3);
        }

        public static String KinngakuAdd(String str1, String str2)
        {
            String sRet = "";

            if (str1 == null || str1.Equals(""))
            {
                if (str2 != null && !str2.Equals(""))
                {
                    sRet = KinngageToNum(str2).ToString();
                }
            }
            else if (str2 == null || str2.Equals(""))
            {
                sRet = KinngageToNum(str1).ToString();
            }
            else
            {
                sRet = (KinngageToNum(str1) + KinngageToNum(str2)).ToString();
            }

            return sRet;
        }

        public static String KinngakuSub(String str1, String str2)
        {
            String sRet = "";

            if (str1 == null || str1.Equals(""))
            {
                if (str2 != null && !str2.Equals(""))
                {
                    sRet = (0 - KinngageToNum(str2)).ToString();
                }
            }
            else if (str2 == null || str2.Equals(""))
            {
                sRet = KinngageToNum(str1).ToString();
            }
            else
            {
                sRet = (KinngageToNum(str1) - KinngageToNum(str2)).ToString();
            }

            return sRet;
        }

        public static String Kinngaku乗算(String str1, double f2)
        {
            String sRet = "";
            double d1 = f2;

            if (str1 == null || str1.Equals(""))
            {
                sRet = "0";
            }
            else
            {
                sRet = Math.Floor((KinngageToNum(str1) * d1)).ToString();
            }

            return sRet;
        }

        public static String Kinngaku除算(String str1, int f2)
        {
            String sRet = "";

            if (str1 == null || str1.Equals(""))
            {
                sRet = "0";
            }
            else
            {
                sRet = Math.Floor((double)(KinngageToNum(str1) / f2)).ToString();
            }

            return sRet;
        }

        public static bool CheckKinngaku(TextBox sender,object strOut = null)
        {
            String line = ((TextBox)sender).Text;

            if (IsKinngaku(line) >= 0)
            {
                line = KinngageToNum(line).ToString();
            }

            line = line.TrimStart('0');

            if (!line.Equals(""))
            {
                line = numToKinngake(line);

                if (ComClass.IsKinngaku(line) == -1)
                {
                    if (strOut == null)
                    {
                        MessageBox.Show("数字以外を入力しないでください。");
                    }
                    else
                    {
                        ((ToolStripStatusLabel)strOut).Text = "数字以外を入力しないでください。";
                    }
                    ((TextBox)sender).BackColor = Color.Red;
                    ((TextBox)sender).ForeColor = Color.White;
                    return false;
                }
                else
                {
                    ((TextBox)sender).Text = line;
                    ((TextBox)sender).BackColor = Color.White;
                    ((TextBox)sender).ForeColor = Color.Black;
                }
            }
            else
            {
                ((TextBox)sender).Text = "\\0";
                ((TextBox)sender).BackColor = Color.White;
                ((TextBox)sender).ForeColor = Color.Black;
            }

            return true;
        }

        public static String Kinngeku下一桁切り捨て(String str1)
        {
            return Kinngaku乗算(Kinngaku除算(str1, 10), 10);
        }

        public static bool Getテンプレートファイル(SqlConnection conn, string 会社, ref string ファイル名)
        {
            string sql = string.Format(@"select * from HL_JIMU_テンプレート where 会社 =N'{0}' and テンプレートファイル名 = '{1}'",
            会社, ファイル名);

            SqlCommand com = new SqlCommand(sql, conn);

            SqlDataReader reader = com.ExecuteReader();

            string tmpDir = @"C:\Windows\Temp\";
            ファイル名 = tmpDir + ファイル名;

            if (reader.Read())
            {
                try
                {
                    File.WriteAllBytes(ファイル名, (byte[])reader["テンプレートファイル"]);
                }
                catch
                {
                    return false;
                }
            }
            else
            {
                return false;
            }

            reader.Close();

            return true;

        }

        public static Bitmap GetThumbnail(Bitmap b, int destHeight, int destWidth)
        {
            System.Drawing.Image imgSource = b;
            System.Drawing.Imaging.ImageFormat thisFormat = imgSource.RawFormat;
            int sW = 0, sH = 0;
            // 按比例缩放
            int sWidth = imgSource.Width;
            int sHeight = imgSource.Height;

            if (sHeight > destHeight || sWidth > destWidth)
            {
                if ((sWidth * destHeight) > (sHeight * destWidth))
                {
                    sW = destWidth;
                    sH = (destWidth * sHeight) / sWidth;
                }
                else
                {
                    sH = destHeight;
                    sW = (sWidth * destHeight) / sHeight;
                }
            }
            else
            {
                sW = sWidth;
                sH = sHeight;
            }

            Bitmap outBmp = new Bitmap(destWidth, destHeight);
            Graphics g = Graphics.FromImage(outBmp);
            g.Clear(Color.Transparent);

            // 设置画布的描绘质量
            g.CompositingQuality = CompositingQuality.GammaCorrected;
            g.SmoothingMode = SmoothingMode.HighQuality;
            g.InterpolationMode = InterpolationMode.HighQualityBicubic;

            g.DrawImage(imgSource, new System.Drawing.Rectangle((destWidth - sW) / 2, (destHeight - sH) / 2, sW, sH), 0, 0, imgSource.Width, imgSource.Height, GraphicsUnit.Pixel);
            g.Dispose();

            // 以下代码为保存图片时，设置压缩质量
            //EncoderParameters encoderParams = new EncoderParameters();
            //long[] quality = new long[1];
            //quality[0] = 100;

            //EncoderParameter encoderParam = new EncoderParameter(System.Drawing.Imaging.Encoder.Quality, quality);
            //encoderParams.Param[0] = encoderParam;

            imgSource.Dispose();

            return outBmp;
        }

        public static String getStrIP()
        {
            StreamReader sr = new StreamReader("C:\\ProgramData\\TEMP\\IP.txt", Encoding.Default);
            String line = sr.ReadLine();
            sr.Close();

            return line;
        }
    }

    /**
* 祝日かどうか判定できるDateTime拡張クラス
* usage: $holidayDateTime->holiday();
*/
    class HolidayDateTime
    {
        /** 祝日一覧 */
        // 種別：
        //   fixed=日付固定
        //   happy=指定の週の月曜日
        //   spring=春分の日専用
        //   autumn=秋分の日専用
        // 種別, 月, 日or週, 開始年, 終了年, 祝日名
        private static string[,] holidays = new string[,]{        
        {"fixed",   "1",  "1", "1949", "9999", "元日"},
        {"happy",   "1",  "12", "2000", "9999", "成人の日"},
        {"fixed",   "2", "11", "1967", "9999", "建国記念の日"},
        {"spring",  "3",  "20", "1949", "9999", "春分の日"},
        {"fixed",   "4", "29", "2007", "9999", "昭和の日"},
        {"fixed",   "5",  "3", "1949", "9999", "憲法記念日"},
        {"fixed",   "5",  "4", "2007", "9999", "みどりの日"},
        {"fixed",   "5",  "5", "1949", "9999", "こどもの日"},
        {"happy",   "7",  "3", "2003", "9999", "海の日"},
        {"fixed",   "8", "11", "2016", "9999", "山の日"},
        {"autumn",  "9",  "22", "1948", "9999", "秋分の日"},
        {"happy",   "9",  "3", "2003", "9999", "敬老の日"},
        {"happy",  "10",  "2", "2000", "9999", "体育の日"},
        {"fixed",  "11",  "3", "1948", "9999", "文化の日"},
        {"fixed",  "11", "23", "1948", "9999", "勤労感謝の日"},
        {"fixed",  "12", "23", "1989", "9999", "天皇誕生日"}
        };

        public static int DaysInMonthJP(int Year, int Month)
        {
            int Days = DateTime.DaysInMonth(Year, Month);

            switch (Month)
            {
                case 1: { Days -= 2; break; }
                case 2: { Days -= 1; break; }
                case 3: { Days -= 1; break; }
                case 4: { Days -= 1; break; }
                case 5: { Days -= 3; break; }
                case 6: { Days -= 0; break; }
                case 7: { Days -= 1; break; }
                case 8: { Days -= 1; break; }
                case 9: { Days -= 2; break; }
                case 10: { Days -= 1; break; }
                case 11: { Days -= 2; break; }
                case 12: { Days -= 1; break; }
            }

            Days -= Get土日(Year, Month).Count();

            return Days;

        }

        public static int DaysInMonthJP(int Year, int Month, string 開始日, string 終了日)
        {
            DateTime Dt開始日;
            DateTime Dt終了日;

            if (
                (Year != int.Parse(開始日.Split('/')[0]))
                ||
                (Month != int.Parse(開始日.Split('/')[1]))
                )
            {
                Dt開始日 = new DateTime(Year, Month, 1);
            }
            else
            {
                Dt開始日 = new DateTime(int.Parse(開始日.Split('/')[0]), int.Parse(開始日.Split('/')[1]), int.Parse(開始日.Split('/')[2]));
            }

            if (終了日.Trim().Equals("-"))
            {
                Dt終了日 = new DateTime(Year, Month, DateTime.DaysInMonth(Year, Month));
            }
            else if (
                (Year != int.Parse(終了日.Split('/')[0]))
                ||
                (Month != int.Parse(終了日.Split('/')[1]))
                )
            {
                Dt終了日 = new DateTime(Year, Month, DateTime.DaysInMonth(Year, Month));
            }
            else
            {
                Dt終了日 = new DateTime(int.Parse(終了日.Split('/')[0]), int.Parse(終了日.Split('/')[1]), int.Parse(終了日.Split('/')[2]));
            }

            int days = (Dt終了日 - Dt開始日).Days + 1;

            for (DateTime d = Dt開始日; DateTime.Compare(d, Dt終了日) != 0; d = d.AddDays(1))
            {
                if (
                    (d.DayOfWeek == DayOfWeek.Sunday)
                    ||
                    (d.DayOfWeek == DayOfWeek.Saturday)
                    )
                {
                    days--;
                }

                for (int i = 0; i < holidays.GetLength(0); i++)
                {
                    DateTime Dtholiday = new DateTime(Year, int.Parse(holidays[i, 1]), int.Parse(holidays[i, 2]));
                    if (DateTime.Compare(d, Dtholiday) == 0)
                    {
                        days--;
                        break;
                    }
                }
            }

            return days;

        }

        static DateTime[] Get土日(int y, int m)
        {

            List<DateTime> days = new List<DateTime>();

            for (DateTime d = new DateTime(y, m, 1);
                                    d.Month == m; d = d.AddDays(1))
            {
                if (
                    (d.DayOfWeek == DayOfWeek.Sunday)
                    ||
                    (d.DayOfWeek == DayOfWeek.Saturday)
                    )
                {
                    days.Add(d);
                }
            }
            return days.ToArray();
        }

    }
}
